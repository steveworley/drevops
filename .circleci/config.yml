#:
#: CircleCI 2.0 configuration file.
#:
#: Understanding CircleCI 'docker' executor.
#:
#: CircleCI uses "runner" container (created from specified Docker image)
#: to checkout source code and run commands defined in this file.
#: Application Docker containers (the ones defined in docker-compose.yml)
#: run on *remote* docker server, started by CircleCI as a part of their stack.
#: The "runner" container uses Docker client to control remote Docker server
#: (when used locally, Docker bundles both client and server into a single
#: "Docker" application, so you may not even know that these are two different
#: services).
#:
#: Because Docker images use layers, it is possible to cache Docker images
#: between builds to significantly speedup application provisioning for each
#: job (it requires enabling of Docker Layer Caching feature in CircleCI by
#: lodging a support request).
#: https://circleci.com/docs/2.0/docker-layer-caching/
#;
#; Comments starting with '#;', '#;<' or '#;>' (like the ones used for the
#; current paragraph) are explaining DrevOps inner workings and can be safely
#; removed for your project. They are automatically removed when installing
#; or updating DrevOps.
version: 2

#:###############################################################################
#: VARIABLES
#:###############################################################################
#: For YAML support of anchors and references, see http://blog.daemonl.com/2016/02/yaml.html
aliases:
  #:-----------------------------------------------------------------------------
  #: Per-project variables.
  #:-----------------------------------------------------------------------------

  # Timezone of the runner container to ensure that DB cache key uses correct date.
  #; Replace this timezone with your own.
  #; @see https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
  - &timezone "Australia/Melbourne"

  # SSH key fingerprint to download the database.
  #: Generate a separate SSH key for a user who has permissions to download the
  #: database from the production environment.
  #;
  #; This is a fingerprint of the key to test DrevOps project itself as an example.
  #; Replace this key fingerprint with your own.
  - &database_ssh_fingerprint "56:f3:3f:51:c3:8f:b3:75:01:90:6e:26:48:e7:48:e1"

  # SSH key fingerprint to deploy code.
  #: Generate a separate SSH key for a user who has push permissions to
  #: $DEPLOY_GIT_REMOTE repo with `ssh-keygen -m PEM -t rsa -C "deployer@example.com"
  #: command and add private key under "SSH Permissions" in CircleCI UI.
  #;
  #; This is a fingerprint of the key to push DrevOps project itself as an example.
  #; Replace this key fingerprint with your own.
  - &deploy_ssh_fingerprint "56:f3:3f:51:c3:8f:b3:75:01:90:6e:26:48:e7:48:e1"

  #:-----------------------------------------------------------------------------
  #: Optional variables.
  #:-----------------------------------------------------------------------------

  # How often to refresh the cache of the database. Refer to `date` command.
  - &db_cache_timestamp +%Y_%m_%d

  # Use previous database caches on this branch as a fallback if the above cache
  # does not match (for example, the cache is available only from the previous
  # day). Only allowed "yes" or "no" (include enclosing double quotes).
  - &db_cache_fallback "yes"
  # Which branch to use for a source of the DB caches. Usually, it is the default
  # project branch or *nightly_branch (see below).
  - &db_cache_branch "develop"

  # Database cache directory.
  - &db_cache_dir /root/project/.data

  # CI runner resource class.
  # @see https://circleci.com/docs/2.0/configuration-reference/#resource_class
  # Change to 'large' for faster builds. Requires lodging a support request
  # with CircleCI o enable this feature.
  - &resource_class medium

  # Docker Layer Caching allows to significantly speed up builds by caching
  # images built during previous runs.
  # @see https://circleci.com/docs/2.0/docker-layer-caching/
  # Change to 'true' (without single quotes) to enable. Requires lodging a
  # support request with CircleCI to enable this feature.
  - &docker_layer_caching false

  # Schedule to run nightly builds. Defaults to 4am UTC (make sure to adjust for
  # your time zone). Usually used when database captured in the Docker image
  # layer to produce nightly database caches.
  - &nightly_schedule "0 18 * * *"

  # The branch used for nightly builds.
  - &nightly_branch develop

  #:-----------------------------------------------------------------------------

  #: Shared configuration applied to each job.
  - &container_config
    #:
    #: Location of checked-out files within "runner" container.
    working_directory: &working_directory /root/project
    environment:
      DATABASE_SSH_FINGERPRINT: *database_ssh_fingerprint
      DEPLOY_SSH_FINGERPRINT: *deploy_ssh_fingerprint
    docker:
      #; Using "runner" container where each job will be executed. This container
      #; has all necessary tools to run dockerized environment.
      #; @see https://github.com/drevops/ci-builder
      - image: drevops/ci-builder
        auth:
          username: $DOCKER_REGISTRY_USERNAME
          password: $DOCKER_REGISTRY_TOKEN
        environment:
          # Set timezone to ensure that executed operations use correct timestamps.
          TZ: *timezone
          # Volumes mounting to host is not supported in CircleCI.
          VOLUMES_MOUNTED: 0
          # Always answer 'y' to any confirmation questions.
          CONFIRM_RESPONSE: 'y'
          # How often to refresh the cache of the DB dump. Refer to `date` command.
          DB_CACHE_TIMESTAMP: *db_cache_timestamp
          # Use cache fallback if the above timestamp does not match.
          DB_CACHE_FALLBACK: *db_cache_fallback
          # Which branch to use as a source of DB caches.
          DB_CACHE_BRANCH: *db_cache_branch
          # Directory to store code exported between jobs.
          BUILD_EXPORT_DIR: &build_export_dir /workspace/code
          # Do not use symlink when downloading database dump (useful only locally).
          DB_USE_SYMLINK: false
          # Directory to store test results.
          TEST_LOG_DIR: &test_log_dir /tmp/tests
          # Directory to store test artifacts.
          TEST_ARTIFACT_DIR: &test_artifact_dir /tmp/artifacts
          # Use compact error reporting format.
          BEHAT_FORMAT: progress_fail
          # Directory to use for code deployments.
          DEPLOY_CODE_SRC: *build_export_dir
          # Source code location.
          DEPLOY_CODE_ROOT: *working_directory
          # Deployment report file location.
          DEPLOY_REPORT: /tmp/artifacts/deployment_report.txt
          # Check only minimal stack requirements.
          DOCTOR_CHECK_MINIMAL: 1
    resource_class: *resource_class

  # Step to setup remote docker.
  - &step_setup_remote_docker
    setup_remote_docker:
      docker_layer_caching: *docker_layer_caching
      version: 19.03.13
  # Step to process the codebase to be ran in CI environment.
  - &step_process_codebase
    run:
      name: Process codebase to run in CI
      #: Remove lines containing '###' and uncomment comments starting with '##'.
      command: sed -i -e "/###/d" docker-compose.yml && sed -i -e "s/##//" docker-compose.yml

#:###############################################################################
#: JOBS
#:###############################################################################
jobs:
  #;< !FRESH_INSTALL
  #: Database handling is a first step of the build.
  #:
  #: $DB_CACHE_TIMESTAMP is used to determine if a fresh DB dump should be downloaded
  #: for the current build. Usually, a daily database dump is sufficient for
  #: development activities.
  #: $DB_CACHE_FALLBACK is used if the cache did not match $DB_CACHE_TIMESTAMP.
  #: This allows to rely on the cache from the previous days within the same
  #: branch.
  #:
  #: Database will be sanitized using standard drush sanitization. You may also
  #: use custom SQL script to add more sanitization steps by putting SQL
  #: statements into scripts/sanitize.sql file.
  database: &job_database
    <<: *container_config
    steps:
      - attach_workspace:
          at: /workspace
      # Add SSH key into "runner" container to have SSH access to download DB.
      - add_ssh_keys:
          fingerprints:
            - *database_ssh_fingerprint
      - checkout
      - *step_process_codebase
      - *step_setup_remote_docker
      - run:
          name: Set cache keys for database caching
          command: |
            echo "${DB_CACHE_BRANCH}" > /tmp/DB_CACHE_BRANCH && cat /tmp/DB_CACHE_BRANCH
            echo "${DB_CACHE_FALLBACK/no/${CIRCLE_BUILD_NUM}}" > /tmp/DB_CACHE_FALLBACK && cat /tmp/DB_CACHE_FALLBACK
            echo "$(date ${DB_CACHE_TIMESTAMP})" > /tmp/DB_CACHE_TIMESTAMP && cat /tmp/DB_CACHE_TIMESTAMP
            echo "yes" > /tmp/DB_CACHE_FALLBACK_YES && cat /tmp/DB_CACHE_FALLBACK_YES

      - restore_cache:
          keys:
            #:
            #: https://circleci.com/docs/2.0/caching/#restoring-cache
            #:
            #: Change 'v1' to 'v2', 'v3' etc., commit and push to force cache reset.
            #:
            #: Lookup cache based on the default branch and a timestamp. Allows
            #: to use cache from the very first build on the day (sanitized
            #: database dump, for example).
            - v1-db8-{{ checksum "/tmp/DB_CACHE_BRANCH" }}-{{ checksum "/tmp/DB_CACHE_FALLBACK" }}-{{ checksum "/tmp/DB_CACHE_TIMESTAMP" }}
            #:
            #: Fallback to caching by default branch name only. Allows to use
            #: cache from the branch build on the previous day.
            - v1-db8-{{ checksum "/tmp/DB_CACHE_BRANCH" }}-{{ checksum "/tmp/DB_CACHE_FALLBACK" }}-
      #: Download database and run post DB download commands: build site and
      #: export the database. Note that configuration changes and DB updates
      #: are not applied, so we could cache the database as it was downloaded.
      - run:
          name: Download DB
          command: DOWNLOAD_POST_PROCESS="export SKIP_POST_DB_IMPORT=1 && ahoy build && ahoy export-db db.sql" ahoy download-db
          no_output_timeout: 30m
      - save_cache:
          # Save cache per default branch and the timestamp. Note that the
          # cache fallback flag is enabled for this case in order to
          # save cache even if fallback is not used when restoring it.
          # The cache will not be saved if it already exist.
          key: v1-db8-{{ checksum "/tmp/DB_CACHE_BRANCH" }}-{{ checksum "/tmp/DB_CACHE_FALLBACK_YES" }}-{{ checksum "/tmp/DB_CACHE_TIMESTAMP" }}
          paths:
            - *db_cache_dir

  #; Nightly database job. Same as above, but with additional variables set.
  database_nightly:
    <<: *job_database
    environment:
      DATABASE_SSH_FINGERPRINT: *database_ssh_fingerprint
      DEPLOY_SSH_FINGERPRINT: *deploy_ssh_fingerprint
      # Enforce fresh DB build (do not rely on fallback caches).
      DB_CACHE_FALLBACK: 'no'
      # Always use fresh base image for the database.
      DATABASE_IMAGE_BASE: drevops/mariadb-drupal-data
      # Deploy docker image (if DOCKER_IMAGE storage is used) to provide fresh
      # daily images for developers.
      EXPORT_DB_DEPLOY_DOCKER: 1
  #;> !FRESH_INSTALL

  #; Build and test is a second step of the build. The testing is performed
  #; within the same job to save time on provisioning during the job.
  build: &job_build
    <<: *container_config
    parallelism: 2
    steps:
      - attach_workspace:
          at: /workspace
      - checkout
      - *step_process_codebase
      - *step_setup_remote_docker
      - run:
          name: Set cache keys for database caching
          command: |
            echo "${DB_CACHE_BRANCH}" > /tmp/DB_CACHE_BRANCH && cat /tmp/DB_CACHE_BRANCH
            echo "yes" > /tmp/DB_CACHE_FALLBACK_YES && cat /tmp/DB_CACHE_FALLBACK_YES
            echo "$(date ${DB_CACHE_TIMESTAMP})" > /tmp/DB_CACHE_TIMESTAMP && cat /tmp/DB_CACHE_TIMESTAMP
      - restore_cache:
          keys:
            #
            # Use cached artifacts from previous builds of this branch ran at
            # any time.
            # https://circleci.com/docs/2.0/caching/#restoring-cache
            - v1-db8-{{ checksum "/tmp/DB_CACHE_BRANCH" }}-{{ checksum "/tmp/DB_CACHE_FALLBACK_YES" }}-{{ checksum "/tmp/DB_CACHE_TIMESTAMP" }}
            - v1-db8-{{ checksum "/tmp/DB_CACHE_BRANCH" }}-{{ checksum "/tmp/DB_CACHE_FALLBACK_YES" }}-
      - run:
          name: Build site
          command: ahoy build
          no_output_timeout: 30m
      - run:
          name: Lint code
          command: ahoy lint
      - run:
          name: Run tests
          command: 'if [ $CIRCLE_NODE_TOTAL -gt 1 ]; then export BEHAT_PARALLEL_INDEX=$CIRCLE_NODE_INDEX; fi && ahoy test'
      - run:
          name: Process test logs and artifacts
          command: |
            [ -n "$(docker-compose ps -q cli)" ] && [ -n "$(docker ps -q --no-trunc | grep "$(docker-compose ps -q cli)")" ] && (
              ahoy cli mkdir -p "${TEST_LOG_DIR}" && docker cp "$(docker-compose ps -q cli)":"${TEST_LOG_DIR}" "${TEST_LOG_DIR}"
              ahoy cli mkdir -p "${TEST_ARTIFACT_DIR}" && docker cp "$(docker-compose ps -q cli)":"${TEST_ARTIFACT_DIR}" "${TEST_ARTIFACT_DIR}"
            ) || true
          when: always
      - store_test_results:
          path: *test_log_dir
          when: always
      - store_artifacts:
          path: *test_artifact_dir
          when: always
      #:
      #: Persisting previously built application code artifact (without
      #: development dependencies) to use it in deployment job.
      - persist_to_workspace:
          root: /workspace
          paths:
            - code

  #;< DEPLOYMENT
  # Deploy primary branches.
  deploy: &job_deploy
    <<: *container_config
    steps:
      #:
      #: Workspace now contains previously built application code artifact.
      - attach_workspace:
          at: /workspace
      #:
      #: Add SSH key into "runner" container to have "push" access to remote
      #: repository.
      - add_ssh_keys:
          fingerprints:
            - *deploy_ssh_fingerprint
      - checkout
      - *step_process_codebase
      - run:
          command: DEPLOY_BRANCH="$CIRCLE_BRANCH" DEPLOY_PR="$(echo $CIRCLE_PULL_REQUEST | cut -d'/' -f 7)" DEPLOY_PR_HEAD=$CIRCLE_SHA1 ahoy deploy
          no_output_timeout: 30m
      - store_artifacts:
          path: *test_artifact_dir

  # Deploy tags.
  deploy_tags: &job_deploy_tags
    <<: *container_config
    steps:
      #:
      #: Workspace now contains previously built application code artifact.
      - attach_workspace:
          at: /workspace
      #:
      #: Add SSH key into "runner" container to have "push" access to remote
      #: repository.
      - add_ssh_keys:
          fingerprints:
            - *deploy_ssh_fingerprint
      - checkout
      - *step_process_codebase
      - run:
          command: DEPLOY_GIT_BRANCH="deployment/[tags:-]" ahoy deploy
          no_output_timeout: 30m
      - store_artifacts:
          path: *test_artifact_dir
  #;> DEPLOYMENT

  #;----------------------------------------------------------------------------
  #; DREVOPS development section. Will be removed during installation/update.
  #;----------------------------------------------------------------------------
  #;
  #; We are using CircleCI config file to both run the application tests (what
  #; a consumer site would use) and DrevOps' own tests (to make sure that
  #; this project is "buildable" at any time).
  #;
  #;< DREVOPS
  #; Test suite for DrevOps.
  drevops_test: &job_drevops_test
    <<: *container_config
    parallelism: 2
    steps:
      - checkout
      - *step_process_codebase
      - *step_setup_remote_docker
      - run:
          name: Run functional tests (long)
          command: scripts/drevops/utils/ci-drevops-test.sh
          no_output_timeout: 60m

  drevops_test_deployment:
    <<: *container_config
    parallelism: 2
    steps:
      - checkout
      - *step_process_codebase
      - *step_setup_remote_docker
      - add_ssh_keys:
          fingerprints:
            - *deploy_ssh_fingerprint
      - attach_workspace:
          at: /workspace
      - run:
          name: Run deployment tests (long)
          command: scripts/drevops/utils/ci-drevops-test-deployment.sh
          no_output_timeout: 60m

  # Deployment of feature branches and tags for DrevOps itself.
  drevops_deploy:
    <<: *job_deploy

  drevops_deploy_tags:
    <<: *job_deploy_tags

  #; Launching and testing databases stored within Docker data image.
  #;
  #; Switching between "database in file" (DIF, mounted data volume) and
  #; "database-in-Docker-image" (DIDI, data volume is a part of the image) is
  #; done by providing the value of DATABASE_IMAGE environment variable,
  #; which would be set in .env file for consumer projects.
  #;
  #; Also, the source of the database can be either file (downloaded from
  #; remote location) or a previous version of the data image.
  #;
  #; This means that there should be the following tests for DrevOps
  #; database-in-Docker-image workflow functionality:
  #; 1. DB is file -> create data image -> cache data image and push it to registry -> build and test site
  #; 2. DB is image -> create data image -> cache data image and push it to registry -> build and test site
  #;
  #; Since we need to have "database" job generic for consumer sites and any
  #; logic is controlled within DrevOps scripts, we have to create additional
  #; test jobs below and run them as a part of the CI system for DrevOps itself.
  #;
  #; Job to test creation of the image from DB dump file when using
  #; DATABASE_IMAGE workflow.
  drevops_didi_database_fi:
    <<: *job_database
    environment:
      DATABASE_DOWNLOAD_SOURCE: curl
      FORCE_DB_DOWNLOAD: 1
      #; Use Docker database storage despite that the file is coming
      #; from CURL - this is to make sure that image is exported into cache
      #; to be used between jobs. Note that in consumer project .env file would
      #; have DATABASE_IMAGE variable set and this environment variable would
      #; not be required.
      #;
      #; Note that here and below we are using "destination" demo image - this
      #; is to allow updating of this image from CI tests without jeopardizing
      #; main demo image.
      DATABASE_IMAGE: drevops/drevops-mariadb-drupal-data-demo-destination-8.x
      #; Use a separate tag to make sure that pushed image does not affect
      #; other tests (pushing broken image as 'latest' will fail other tests).
      DOCKER_IMAGE_TAG: drevops_didi_database_fi
      #; Also, use this job to test pushing of the DB image to the Docker
      #; registry so mimic what database_nightly job would do.
      EXPORT_DB_DEPLOY_DOCKER: 1
      #; Use custom cache key for this workflow to make sure that caches from
      #; the main workflow are separated from this one.
      DB_CACHE_BRANCH: drevops_didi_fi
  #; Job to test creation of the image from the previous version of the image
  #; when using database-in-Docker-image workflow.
  drevops_didi_database_ii:
    <<: *job_database
    environment:
      DATABASE_DOWNLOAD_SOURCE: docker_registry
      FORCE_DB_DOWNLOAD: 1
      DATABASE_IMAGE: drevops/drevops-mariadb-drupal-data-demo-destination-8.x
      DOCKER_IMAGE_TAG: drevops_didi_database_ii
      #; Also, use this job to test pushing of the DB image to the Docker
      #; registry so mimic what database_nightly job would do.
      EXPORT_DB_DEPLOY_DOCKER: 1
      #; Use custom cache key for this workflow to make sure that caches from
      #; the main workflow are separated from this one.
      DB_CACHE_BRANCH: drevops_didi_ii
  #; Job to test build of the image from the previous stage of the image when
  #; using database-in-Docker-image workflow. Overwriting just the DATABASE_IMAGE
  #; variable should change the storage mechanisms, but preserve application-level
  #; stack operation.
  drevops_didi_build_fi:
    <<: *job_build
    environment:
      DATABASE_IMAGE: drevops/drevops-mariadb-drupal-data-demo-destination-8.x:drevops_didi_database_fi
      #; Use custom cache key for this workflow to make sure that caches from
      #; the main workflow are separated from this one.
      DB_CACHE_BRANCH: drevops_didi_fi
  drevops_didi_build_ii:
    <<: *job_build
    environment:
      DATABASE_IMAGE: drevops/drevops-mariadb-drupal-data-demo-destination-8.x:drevops_didi_database_ii
      #; Use custom cache key for this workflow to make sure that caches from
      #; the main workflow are separated from this one.
      DB_CACHE_BRANCH: drevops_didi_ii
  #;> DREVOPS

#:###############################################################################
#: WORKFLOWS
#:###############################################################################
workflows:
  version: 2
  #:
  #: Commit workflow. Runs for every commit push to the remote repository.
  commit:
    jobs:
      - database:
          filters:
            tags:
              only: /.*/
      - build:
          #;< !FRESH_INSTALL
          requires:
            - database
          #;> !FRESH_INSTALL
          filters:
            tags:
              only: /.*/
      - deploy:
          requires:
            - build
          filters:
            branches:
              # Allowed branches:
              # - master, develop, ci, cisomething
              # - release/123, release/123.456, release/123.456.789, release/123.456.789-rc123
              # - hotfix/123, hotfix/123.456, hotfix/123.456.789
              # - feature/description, feature/123-description, but not feature/8.x-description or feature/7.x-description
              only: /master|develop|ci.*|(release\/)?[0-9]+(\.[0-9]+)+(-rc[0-9]+)?|(hotfix\/)?[0-9]+(\.[0-9]+)+(-rc[0-9]+)?|feature\/(?!7.x-|8.x-)[a-zA-z0-9\-\.\,]+/
            tags:
              ignore: /.*/
      - deploy_tags:
          requires:
            - build
          filters:
            branches:
              ignore: /.*/
            tags:
              # Allowed tags: 1, 123, 123.456, 123.456.789, 123.456.789-rc123
              only: /^[0-9]+(\.[0-9]+)+(-rc[0-9]+)?$/
  #;------------------------------------------------------------------------
  #; DREVOPS development section. Will be removed during installation/update.
  #;------------------------------------------------------------------------
  #;
  #;< DREVOPS
  #; Remove the code below in your project.
  #; Run unit and functional tests for DrevOps.
      - drevops_test:
          filters:
            tags:
              only: /.*/
      #; Run deployment tests for DrevOps.
      - drevops_test_deployment:
          requires:
            - drevops_test
            - build
          filters:
            tags:
              only: /.*/
      #; Run actual deployment of DrevOps code to destination codebase (integration test).
      #; @see https://github.com/drevops/drevops-destination
      - drevops_deploy:
          requires:
            - build
            - drevops_test
          filters:
            branches:
              # Allowed branches: 7.x, 8.x, feature/7.x-description, feature/8.x-description
              only: /(?:7|8)\.x|feature\/(?:7|8)\.x[a-zA-z0-9\-\.\,]+/
            tags:
              ignore: /.*/
      #; Run actual deployment of DrevOps code to destination codebase (integration test).
      #; @see https://github.com/drevops/drevops-destination
      - drevops_deploy_tags:
          requires:
            - build
            - drevops_test
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^(?:7|8)\.x\-[0-9]+\.[0-9]+(?:[A-z0-9\-])*$/

  #; Test workflow to test DATABASE_IMAGE workflow for DB from file.
  drevops_didi_fi:
    jobs:
      - drevops_didi_database_fi
      - drevops_didi_build_fi:
          requires:
            - drevops_didi_database_fi

  #; Test workflow to test DATABASE_IMAGE workflow for DB from docker registry.
  drevops_didi_ii:
    jobs:
      - drevops_didi_database_ii
      - drevops_didi_build_ii:
          requires:
            - drevops_didi_database_ii
  #;----------------------------------------------------------------------------
  #;> DREVOPS

  #: Nightly workflow runs overnight using the code from `nightly_branch`
  #: (the default branch) to capture fresh database and cache it.
  nightly:
    triggers:
      - schedule:
          cron: *nightly_schedule
          filters:
            branches:
              only:
                - *nightly_branch
    jobs:
      - database_nightly
